#!/usr/bin/env python3
"""
Teste de valida√ß√£o do c√≥digo
Verifica se tudo est√° configurado corretamente sem precisar conectar na Binance
"""

import os
import sys
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

def test_structure():
    """Testa se a estrutura do projeto est√° correta"""
    
    print("=" * 50)
    print("TESTE DE VALIDA√á√ÉO DO C√ìDIGO")
    print("=" * 50)
    
    all_ok = True
    
    # Testa estrutura de pastas
    print("\nüìÅ Verificando estrutura de pastas...")
    required_dirs = ['src', 'config', 'logs', 'tests']
    
    for dir_name in required_dirs:
        dir_path = root_dir / dir_name
        if dir_path.exists():
            print(f"  ‚úì {dir_name}/")
        else:
            print(f"  ‚úó {dir_name}/ - N√ÉO ENCONTRADO")
            all_ok = False
    
    # Testa arquivo de configura√ß√£o
    print("\n‚öôÔ∏è  Verificando arquivo de configura√ß√£o...")
    config_path = root_dir / 'config' / 'config.env'
    
    if config_path.exists():
        print(f"  ‚úì config.env encontrado")
        
        # Carrega e valida as chaves
        from dotenv import load_dotenv
        load_dotenv(config_path)
        
        api_key = os.getenv('BINANCE_API_KEY')
        api_secret = os.getenv('BINANCE_API_SECRET')
        
        if api_key and len(api_key) > 10:
            print(f"  ‚úì BINANCE_API_KEY configurada ({len(api_key)} caracteres)")
        else:
            print(f"  ‚úó BINANCE_API_KEY inv√°lida ou ausente")
            all_ok = False
            
        if api_secret and len(api_secret) > 10:
            print(f"  ‚úì BINANCE_API_SECRET configurada ({len(api_secret)} caracteres)")
        else:
            print(f"  ‚úó BINANCE_API_SECRET inv√°lida ou ausente")
            all_ok = False
    else:
        print(f"  ‚úó config.env N√ÉO ENCONTRADO")
        all_ok = False
    
    # Testa bibliotecas instaladas
    print("\nüì¶ Verificando bibliotecas instaladas...")
    
    libraries = [
        ('binance', 'python-binance'),
        ('requests', 'requests'),
        ('dotenv', 'python-dotenv')
    ]
    
    for lib_import, lib_name in libraries:
        try:
            __import__(lib_import)
            print(f"  ‚úì {lib_name}")
        except ImportError:
            print(f"  ‚úó {lib_name} - N√ÉO INSTALADA")
            all_ok = False
    
    # Testa importa√ß√£o do cliente Binance
    print("\nüîå Verificando cliente Binance...")
    try:
        from binance.client import Client
        print(f"  ‚úì Cliente Binance importado com sucesso")
        print(f"  ‚úì C√≥digo pronto para conectar (ser√° testado no Digital Ocean)")
        
    except Exception as e:
        print(f"  ‚úó Erro ao importar cliente: {str(e)}")
        all_ok = False
    
    return all_ok

if __name__ == "__main__":
    print()
    success = test_structure()
    
    print("\n" + "=" * 50)
    
    if success:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
        print("\nC√≥digo validado e pronto para:")
        print("  1. Ser transferido para o Digital Ocean")
        print("  2. Testar conex√£o real com Binance")
        print("  3. Iniciar desenvolvimento da l√≥gica de arbitragem")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM")
        print("\nVerifique os itens marcados com ‚úó")
    
    print("=" * 50)
    print()
    
    sys.exit(0 if success else 1)
